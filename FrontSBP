import os
import requests
import openpyxl
from openpyxl.utils.exceptions import InvalidFileException

API_TOKEN = ''
INBOX_ID = ''  
DOWNLOAD_DIR = ''  

if not API_TOKEN:
    raise ValueError("No API token provided. Please set the API token.")

headers = {
    'Authorization': f'Bearer {API_TOKEN}',
    'Accept': 'application/json'
}

session = requests.Session()
session.headers.update(headers)

def sanitize_string(s):
    invalid_chars = "<>:\"/\\|?*"
    for char in invalid_chars:
        s = s.replace(char, '_')
    return s.encode('ascii', 'ignore').decode('ascii')

def get_conversations(inbox_id):
    url = f'https://api2.frontapp.com/inboxes/{inbox_id}/conversations'
    response = session.get(url)
    response.raise_for_status()
    return response.json().get('_results', [])

def get_messages(conversation_id):
    url = f'https://api2.frontapp.com/conversations/{conversation_id}/messages'
    response = session.get(url)
    response.raise_for_status()
    return response.json().get('_results', [])

# ////////////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////

def download_attachment(attachment):
    url = attachment.get('url')
    filename = sanitize_string(attachment.get('filename', ''))
    if not filename:
        print("Skipping empty filename.")
        return
    
    if not (filename.endswith('.xls') or filename.endswith('.xlsx')):
        print(f"Skipping non-excel file: {filename}")
        return

    response = session.get(url)
    response.raise_for_status()
    os.makedirs(DOWNLOAD_DIR, exist_ok=True)
    file_path = os.path.join(DOWNLOAD_DIR, sanitize_string(filename))

    with open(file_path, 'wb') as f:
        f.write(response.content)
    print(f'Downloaded {sanitize_string(filename)} to {file_path}')

    master_file_path = os.path.join(DOWNLOAD_DIR, '2024-1H Rev to Date.xlsx')
    add_to_master_workbook(file_path, master_file_path)

    # ////////////////////////////////////////////////////////////////////////
    # ////////////////////////////////////////////////////////////////////////

def create_blank_excel(directory):
    wb = openpyxl.Workbook()
    filename = "2024-1H Rev to Date.xlsx"
    filepath = os.path.join(directory, filename)
    wb.save(filepath)
    print(f"Created blank Excel file at {filepath}")


    
    # ////////////////////////////////////////////////////////////////////////
    # ////////////////////////////////////////////////////////////////////////

def add_to_master_workbook(download_file_path, master_file_path):
    try:
        # Load the master workbook
        master_wb = openpyxl.load_workbook(master_file_path)
    except InvalidFileException:
        print("Failed to open the master workbook. It may be corrupted.")
        return

    # Load the downloaded workbook
    try:
        downloaded_wb = openpyxl.load_workbook(download_file_path)
    except InvalidFileException:
        print("Failed to open the downloaded workbook. It may be corrupted.")
        return

    downloaded_ws = downloaded_wb.active
    new_sheet_title = os.path.splitext(os.path.basename(download_file_path))[0][:31]

    # Check if the sheet already exists
    if new_sheet_title in master_wb.sheetnames:
        print(f"Sheet {new_sheet_title} already exists in the master workbook. Skipping addition.")
        return

    # Create new sheet and copy data
    new_ws = master_wb.create_sheet(title=new_sheet_title)
    for row in downloaded_ws.iter_rows(values_only=True):
        new_ws.append(row)

    # Save and close the workbook
    master_wb.save(master_file_path)
    master_wb.close()
    print(f"Data from {download_file_path} added to {master_file_path} in new sheet '{new_sheet_title}'")






def main(inbox_id):

    create_blank_excel(DOWNLOAD_DIR)

    try:
        print(f"Fetching conversations for Inbox ID: {inbox_id}...")
        conversations = get_conversations(inbox_id)
        for conversation in conversations:
            conversation_id = conversation['id']
            print(f"Processing conversation ID: {conversation_id}...")
            messages = get_messages(conversation_id)
            found_attachments = False
            for message in messages:
                if 'attachments' in message:
                    found_attachments = True
                    for attachment in message['attachments']:
                        print(f"Found attachment: {sanitize_string(attachment['filename'])}")
                        download_attachment(attachment)
            if not found_attachments:
                print("No attachments found in messages.")
    except requests.exceptions.HTTPError as err:
        print(f"HTTP error occurred: {err}")
    except Exception as err:
        print(f"An error occurred: {err}")

if __name__ == '__main__':
    main(INBOX_ID)
